/* tslint:disable */
/* eslint-disable */
/**
 * wfile接口文档
 * wfile接口文档
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CloudFilePartTask
 */
export interface CloudFilePartTask {
    /**
     * 主键id
     * @type {number}
     * @memberof CloudFilePartTask
     */
    'id'?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof CloudFilePartTask
     */
    'createTime'?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof CloudFilePartTask
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudFilePartTask
     */
    'fileId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudFilePartTask
     */
    'md5'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudFilePartTask
     */
    'partSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CloudFilePartTask
     */
    'totalIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudFilePartTask
     */
    'objectKey'?: string;
}
/**
 * 云盘文件分页查询请求
 * @export
 * @interface CloudFileQueryPageRequest
 */
export interface CloudFileQueryPageRequest {
    /**
     * 文件名称
     * @type {string}
     * @memberof CloudFileQueryPageRequest
     */
    'fileName'?: string;
    /**
     * 文件MD5
     * @type {string}
     * @memberof CloudFileQueryPageRequest
     */
    'md5'?: string;
    /**
     * 目录ID
     * @type {number}
     * @memberof CloudFileQueryPageRequest
     */
    'dirId'?: number;
    /**
     * 文件类型
     * @type {Array<string>}
     * @memberof CloudFileQueryPageRequest
     */
    'fileType'?: Array<string>;
    /**
     * 每页条数
     * @type {number}
     * @memberof CloudFileQueryPageRequest
     */
    'pageSize'?: number;
    /**
     * 当前页码
     * @type {number}
     * @memberof CloudFileQueryPageRequest
     */
    'pageNo'?: number;
}
/**
 * 
 * @export
 * @interface CloudFileVo
 */
export interface CloudFileVo {
    /**
     * 主键id
     * @type {number}
     * @memberof CloudFileVo
     */
    'id'?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof CloudFileVo
     */
    'createTime'?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof CloudFileVo
     */
    'updateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudFileVo
     */
    'fileName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudFileVo
     */
    'dirId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CloudFileVo
     */
    'fileSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudFileVo
     */
    'fileType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudFileVo
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudFileVo
     */
    'md5'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CloudFileVo
     */
    'hasChildren'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CloudFileVo
     */
    'extInfo'?: string;
}
/**
 * 文件名称列表
 * @export
 * @interface FileDelete2Request
 */
export interface FileDelete2Request {
    /**
     * 
     * @type {string}
     * @memberof FileDelete2Request
     */
    'fileName'?: string;
    /**
     * 
     * @type {number}
     * @memberof FileDelete2Request
     */
    'dirId'?: number;
}
/**
 * 文件删除请求
 * @export
 * @interface FileDeleteRequest
 */
export interface FileDeleteRequest {
    /**
     * 文件id列表
     * @type {Array<number>}
     * @memberof FileDeleteRequest
     */
    'fileIds'?: Array<number>;
    /**
     * 文件md5列表
     * @type {Array<string>}
     * @memberof FileDeleteRequest
     */
    'md5s'?: Array<string>;
    /**
     * 文件名称列表
     * @type {Array<FileDelete2Request>}
     * @memberof FileDeleteRequest
     */
    'delFiles'?: Array<FileDelete2Request>;
}
/**
 * 文件是否存在查询请求
 * @export
 * @interface FileExistQueryRequest
 */
export interface FileExistQueryRequest {
    /**
     * 文件md5
     * @type {string}
     * @memberof FileExistQueryRequest
     */
    'md5'?: string;
    /**
     * 目录id
     * @type {number}
     * @memberof FileExistQueryRequest
     */
    'dirId'?: number;
    /**
     * 文件名称
     * @type {string}
     * @memberof FileExistQueryRequest
     */
    'fileName'?: string;
}
/**
 * 文件夹创建请求
 * @export
 * @interface FileMkDirRequest
 */
export interface FileMkDirRequest {
    /**
     * 文件夹名称
     * @type {string}
     * @memberof FileMkDirRequest
     */
    'dirName'?: string;
    /**
     * 
     * @type {number}
     * @memberof FileMkDirRequest
     */
    'pdirId'?: number;
}
/**
 * 文件分片上传参数
 * @export
 * @interface FileMultipartDTO
 */
export interface FileMultipartDTO {
    /**
     * 文件名
     * @type {string}
     * @memberof FileMultipartDTO
     */
    'fileName': string;
    /**
     * 目录ID
     * @type {number}
     * @memberof FileMultipartDTO
     */
    'dirId': number;
    /**
     * 文件大小
     * @type {number}
     * @memberof FileMultipartDTO
     */
    'fileSize': number;
    /**
     * 文件MD5值
     * @type {string}
     * @memberof FileMultipartDTO
     */
    'md5': string;
    /**
     * 总分片数
     * @type {number}
     * @memberof FileMultipartDTO
     */
    'chunkSize'?: number;
    /**
     * 桶
     * @type {string}
     * @memberof FileMultipartDTO
     */
    'bucketName'?: string;
}
/**
 * 
 * @export
 * @interface FileTaskInfoDTO
 */
export interface FileTaskInfoDTO {
    /**
     * 
     * @type {boolean}
     * @memberof FileTaskInfoDTO
     */
    'finished'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileTaskInfoDTO
     */
    'partSize'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof FileTaskInfoDTO
     */
    'exitPartList'?: Array<object>;
}
/**
 * 
 * @export
 * @interface IPageCloudFileVo
 */
export interface IPageCloudFileVo {
    /**
     * 
     * @type {number}
     * @memberof IPageCloudFileVo
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageCloudFileVo
     */
    'current'?: number;
    /**
     * 
     * @type {Array<CloudFileVo>}
     * @memberof IPageCloudFileVo
     */
    'records'?: Array<CloudFileVo>;
    /**
     * 
     * @type {number}
     * @memberof IPageCloudFileVo
     */
    'pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageCloudFileVo
     */
    'total'?: number;
}
/**
 * 登录响应
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * token
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {SysUser}
     * @memberof LoginResponse
     */
    'sysUser'?: SysUser;
}
/**
 * 
 * @export
 * @interface ResultCloudFilePartTask
 */
export interface ResultCloudFilePartTask {
    /**
     * 
     * @type {number}
     * @memberof ResultCloudFilePartTask
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultCloudFilePartTask
     */
    'msg'?: string;
    /**
     * 
     * @type {CloudFilePartTask}
     * @memberof ResultCloudFilePartTask
     */
    'data'?: CloudFilePartTask;
    /**
     * 
     * @type {boolean}
     * @memberof ResultCloudFilePartTask
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultCloudFilePartTask
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultCloudFilePartTask
     */
    'host'?: string;
}
/**
 * 
 * @export
 * @interface ResultFileTaskInfoDTO
 */
export interface ResultFileTaskInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof ResultFileTaskInfoDTO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultFileTaskInfoDTO
     */
    'msg'?: string;
    /**
     * 
     * @type {FileTaskInfoDTO}
     * @memberof ResultFileTaskInfoDTO
     */
    'data'?: FileTaskInfoDTO;
    /**
     * 
     * @type {boolean}
     * @memberof ResultFileTaskInfoDTO
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultFileTaskInfoDTO
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultFileTaskInfoDTO
     */
    'host'?: string;
}
/**
 * 
 * @export
 * @interface ResultIPageCloudFileVo
 */
export interface ResultIPageCloudFileVo {
    /**
     * 
     * @type {number}
     * @memberof ResultIPageCloudFileVo
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultIPageCloudFileVo
     */
    'msg'?: string;
    /**
     * 
     * @type {IPageCloudFileVo}
     * @memberof ResultIPageCloudFileVo
     */
    'data'?: IPageCloudFileVo;
    /**
     * 
     * @type {boolean}
     * @memberof ResultIPageCloudFileVo
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultIPageCloudFileVo
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultIPageCloudFileVo
     */
    'host'?: string;
}
/**
 * 
 * @export
 * @interface ResultListCloudFileVo
 */
export interface ResultListCloudFileVo {
    /**
     * 
     * @type {number}
     * @memberof ResultListCloudFileVo
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultListCloudFileVo
     */
    'msg'?: string;
    /**
     * 
     * @type {Array<CloudFileVo>}
     * @memberof ResultListCloudFileVo
     */
    'data'?: Array<CloudFileVo>;
    /**
     * 
     * @type {boolean}
     * @memberof ResultListCloudFileVo
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultListCloudFileVo
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultListCloudFileVo
     */
    'host'?: string;
}
/**
 * 
 * @export
 * @interface ResultLoginResponse
 */
export interface ResultLoginResponse {
    /**
     * 
     * @type {number}
     * @memberof ResultLoginResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultLoginResponse
     */
    'msg'?: string;
    /**
     * 
     * @type {LoginResponse}
     * @memberof ResultLoginResponse
     */
    'data'?: LoginResponse;
    /**
     * 
     * @type {boolean}
     * @memberof ResultLoginResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultLoginResponse
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultLoginResponse
     */
    'host'?: string;
}
/**
 * 
 * @export
 * @interface ResultString
 */
export interface ResultString {
    /**
     * 
     * @type {number}
     * @memberof ResultString
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultString
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultString
     */
    'data'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResultString
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultString
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultString
     */
    'host'?: string;
}
/**
 * 
 * @export
 * @interface ResultVoid
 */
export interface ResultVoid {
    /**
     * 
     * @type {number}
     * @memberof ResultVoid
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultVoid
     */
    'msg'?: string;
    /**
     * 
     * @type {object}
     * @memberof ResultVoid
     */
    'data'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof ResultVoid
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ResultVoid
     */
    'showType'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResultVoid
     */
    'host'?: string;
}
/**
 * 用户表
 * @export
 * @interface SysUser
 */
export interface SysUser {
    /**
     * 主键id
     * @type {number}
     * @memberof SysUser
     */
    'id'?: number;
    /**
     * 创建时间
     * @type {string}
     * @memberof SysUser
     */
    'createTime'?: string;
    /**
     * 更新时间
     * @type {string}
     * @memberof SysUser
     */
    'updateTime'?: string;
    /**
     * 用户名
     * @type {string}
     * @memberof SysUser
     */
    'username'?: string;
    /**
     * 昵称
     * @type {string}
     * @memberof SysUser
     */
    'nickname'?: string;
    /**
     * 头像
     * @type {string}
     * @memberof SysUser
     */
    'avatar'?: string;
    /**
     * 最后登录IP
     * @type {string}
     * @memberof SysUser
     */
    'lastLoginIp'?: string;
    /**
     * 最后登录IP城市
     * @type {string}
     * @memberof SysUser
     */
    'ipCity'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除文件
         * @param {FileDeleteRequest} fileDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (fileDeleteRequest: FileDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileDeleteRequest' is not null or undefined
            assertParamExists('_delete', 'fileDeleteRequest', fileDeleteRequest)
            const localVarPath = `/api/cloud/file/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取消分片上传任务
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPartTask: async (fileId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('cancelPartTask', 'fileId', fileId)
            const localVarPath = `/api/cloud/file/cancelPartTask/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建分片上传任务
         * @param {FileMultipartDTO} fileMultipartDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPartTask: async (fileMultipartDTO: FileMultipartDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileMultipartDTO' is not null or undefined
            assertParamExists('createPartTask', 'fileMultipartDTO', fileMultipartDTO)
            const localVarPath = `/api/cloud/file/createPartTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileMultipartDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载文件
         * @param {string} uuid 地址id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('download', 'uuid', uuid)
            const localVarPath = `/api/cloud/file/download/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查某个文件是否存在
         * @param {FileExistQueryRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists: async (request: FileExistQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('exists', 'request', request)
            const localVarPath = `/api/cloud/file/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (request !== undefined) {
                for (const [key, value] of Object.entries(request)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreDownloadUrl: async (fileId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getPreDownloadUrl', 'fileId', fileId)
            const localVarPath = `/api/cloud/file/getPreDownloadUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户登录
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建新的目录
         * @param {FileMkDirRequest} fileMkDirRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mkdir: async (fileMkDirRequest: FileMkDirRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileMkDirRequest' is not null or undefined
            assertParamExists('mkdir', 'fileMkDirRequest', fileMkDirRequest)
            const localVarPath = `/api/cloud/file/mkdir`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileMkDirRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移动文件位置
         * @param {number} fileId 上传文件id
         * @param {string} fileName 文件名称
         * @param {number} newDirId 目标目录id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move: async (fileId: number, fileName: string, newDirId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('move', 'fileId', fileId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('move', 'fileName', fileName)
            // verify required parameter 'newDirId' is not null or undefined
            assertParamExists('move', 'newDirId', newDirId)
            const localVarPath = `/api/cloud/file/move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (newDirId !== undefined) {
                localVarQueryParameter['newDirId'] = newDirId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询文件列表
         * @param {CloudFileQueryPageRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page: async (request: CloudFileQueryPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('page', 'request', request)
            const localVarPath = `/api/cloud/file/query/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (request !== undefined) {
                for (const [key, value] of Object.entries(request)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询目录下的所有目录
         * @param {number} [dirId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDir: async (dirId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/file/query/queryDir`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dirId !== undefined) {
                localVarQueryParameter['dirId'] = dirId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户注册
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (username: string, password: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('register', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('register', 'password', password)
            const localVarPath = `/api/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重命名文件
         * @param {number} fileId 上传文件id
         * @param {string} newName 新文件名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename: async (fileId: number, newName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('rename', 'fileId', fileId)
            // verify required parameter 'newName' is not null or undefined
            assertParamExists('rename', 'newName', newName)
            const localVarPath = `/api/cloud/file/rename`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (newName !== undefined) {
                localVarQueryParameter['newName'] = newName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取分片上传任务详情
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInfo: async (fileId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('taskInfo', 'fileId', fileId)
            const localVarPath = `/api/cloud/file/taskInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 完整上传文件
         * @param {number} [dirId] 
         * @param {Array<string>} [md5s] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFull: async (dirId?: number, md5s?: Array<string>, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/file/upload/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (dirId !== undefined) {
                localVarQueryParameter['dirId'] = dirId;
            }

            if (md5s) {
                localVarQueryParameter['md5s'] = md5s;
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 合并分片
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPart: async (fileId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('uploadPart', 'fileId', fileId)
            const localVarPath = `/api/cloud/file/upload/part/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取预上传文件分片
         * @param {number} fileId 上传文件id
         * @param {number} partNumber 分片索引
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPreUrl: async (fileId: number, partNumber: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('uploadPreUrl', 'fileId', fileId)
            // verify required parameter 'partNumber' is not null or undefined
            assertParamExists('uploadPreUrl', 'partNumber', partNumber)
            const localVarPath = `/api/cloud/file/upload/pre-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (partNumber !== undefined) {
                localVarQueryParameter['partNumber'] = partNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除文件
         * @param {FileDeleteRequest} fileDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(fileDeleteRequest: FileDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(fileDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 取消分片上传任务
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelPartTask(fileId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelPartTask(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.cancelPartTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建分片上传任务
         * @param {FileMultipartDTO} fileMultipartDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPartTask(fileMultipartDTO: FileMultipartDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCloudFilePartTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPartTask(fileMultipartDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPartTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 下载文件
         * @param {string} uuid 地址id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async download(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.download(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.download']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 检查某个文件是否存在
         * @param {FileExistQueryRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exists(request: FileExistQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exists(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.exists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPreDownloadUrl(fileId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPreDownloadUrl(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPreDownloadUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 用户登录
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 用户登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建新的目录
         * @param {FileMkDirRequest} fileMkDirRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mkdir(fileMkDirRequest: FileMkDirRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mkdir(fileMkDirRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.mkdir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 移动文件位置
         * @param {number} fileId 上传文件id
         * @param {string} fileName 文件名称
         * @param {number} newDirId 目标目录id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async move(fileId: number, fileName: string, newDirId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.move(fileId, fileName, newDirId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.move']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 分页查询文件列表
         * @param {CloudFileQueryPageRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page(request: CloudFileQueryPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultIPageCloudFileVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.page(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.page']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 查询目录下的所有目录
         * @param {number} [dirId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryDir(dirId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListCloudFileVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryDir(dirId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryDir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 用户注册
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(username: string, password: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(username, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 重命名文件
         * @param {number} fileId 上传文件id
         * @param {string} newName 新文件名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rename(fileId: number, newName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rename(fileId, newName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rename']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取分片上传任务详情
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskInfo(fileId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultFileTaskInfoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskInfo(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.taskInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 完整上传文件
         * @param {number} [dirId] 
         * @param {Array<string>} [md5s] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFull(dirId?: number, md5s?: Array<string>, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFull(dirId, md5s, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadFull']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 合并分片
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPart(fileId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPart(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadPart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取预上传文件分片
         * @param {number} fileId 上传文件id
         * @param {number} partNumber 分片索引
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPreUrl(fileId: number, partNumber: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPreUrl(fileId, partNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadPreUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除文件
         * @param {FileDeleteRequest} fileDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(fileDeleteRequest: FileDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp._delete(fileDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取消分片上传任务
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPartTask(fileId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.cancelPartTask(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建分片上传任务
         * @param {FileMultipartDTO} fileMultipartDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPartTask(fileMultipartDTO: FileMultipartDTO, options?: RawAxiosRequestConfig): AxiosPromise<ResultCloudFilePartTask> {
            return localVarFp.createPartTask(fileMultipartDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下载文件
         * @param {string} uuid 地址id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.download(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查某个文件是否存在
         * @param {FileExistQueryRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists(request: FileExistQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.exists(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreDownloadUrl(fileId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultString> {
            return localVarFp.getPreDownloadUrl(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户登录
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: RawAxiosRequestConfig): AxiosPromise<ResultLoginResponse> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建新的目录
         * @param {FileMkDirRequest} fileMkDirRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mkdir(fileMkDirRequest: FileMkDirRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.mkdir(fileMkDirRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移动文件位置
         * @param {number} fileId 上传文件id
         * @param {string} fileName 文件名称
         * @param {number} newDirId 目标目录id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move(fileId: number, fileName: string, newDirId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.move(fileId, fileName, newDirId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询文件列表
         * @param {CloudFileQueryPageRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page(request: CloudFileQueryPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResultIPageCloudFileVo> {
            return localVarFp.page(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询目录下的所有目录
         * @param {number} [dirId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDir(dirId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultListCloudFileVo> {
            return localVarFp.queryDir(dirId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户注册
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(username: string, password: string, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.register(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 重命名文件
         * @param {number} fileId 上传文件id
         * @param {string} newName 新文件名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(fileId: number, newName: string, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.rename(fileId, newName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取分片上传任务详情
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInfo(fileId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultFileTaskInfoDTO> {
            return localVarFp.taskInfo(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 完整上传文件
         * @param {number} [dirId] 
         * @param {Array<string>} [md5s] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFull(dirId?: number, md5s?: Array<string>, files?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<ResultVoid> {
            return localVarFp.uploadFull(dirId, md5s, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 合并分片
         * @param {number} fileId 上传文件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPart(fileId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultString> {
            return localVarFp.uploadPart(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取预上传文件分片
         * @param {number} fileId 上传文件id
         * @param {number} partNumber 分片索引
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPreUrl(fileId: number, partNumber: number, options?: RawAxiosRequestConfig): AxiosPromise<ResultString> {
            return localVarFp.uploadPreUrl(fileId, partNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 删除文件
     * @param {FileDeleteRequest} fileDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public _delete(fileDeleteRequest: FileDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration)._delete(fileDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取消分片上传任务
     * @param {number} fileId 上传文件id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cancelPartTask(fileId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cancelPartTask(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建分片上传任务
     * @param {FileMultipartDTO} fileMultipartDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPartTask(fileMultipartDTO: FileMultipartDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPartTask(fileMultipartDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 下载文件
     * @param {string} uuid 地址id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public download(uuid: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).download(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查某个文件是否存在
     * @param {FileExistQueryRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exists(request: FileExistQueryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).exists(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPreDownloadUrl(fileId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPreDownloadUrl(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户登录
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建新的目录
     * @param {FileMkDirRequest} fileMkDirRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mkdir(fileMkDirRequest: FileMkDirRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mkdir(fileMkDirRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移动文件位置
     * @param {number} fileId 上传文件id
     * @param {string} fileName 文件名称
     * @param {number} newDirId 目标目录id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public move(fileId: number, fileName: string, newDirId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).move(fileId, fileName, newDirId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询文件列表
     * @param {CloudFileQueryPageRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public page(request: CloudFileQueryPageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).page(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询目录下的所有目录
     * @param {number} [dirId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryDir(dirId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryDir(dirId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户注册
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(username: string, password: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 重命名文件
     * @param {number} fileId 上传文件id
     * @param {string} newName 新文件名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rename(fileId: number, newName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rename(fileId, newName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取分片上传任务详情
     * @param {number} fileId 上传文件id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public taskInfo(fileId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).taskInfo(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 完整上传文件
     * @param {number} [dirId] 
     * @param {Array<string>} [md5s] 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadFull(dirId?: number, md5s?: Array<string>, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadFull(dirId, md5s, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 合并分片
     * @param {number} fileId 上传文件id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadPart(fileId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadPart(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取预上传文件分片
     * @param {number} fileId 上传文件id
     * @param {number} partNumber 分片索引
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadPreUrl(fileId: number, partNumber: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadPreUrl(fileId, partNumber, options).then((request) => request(this.axios, this.basePath));
    }
}



